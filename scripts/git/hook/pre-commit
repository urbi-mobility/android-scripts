#!/bin/sh
set -e

##### CHANGELOG AUTO-UPDATE START #####
echo "Checking for module changes and updating changelogs..."

# Module to changelog mapping (based on buildSrc/build.gradle.kts + app modules)
declare -A MODULE_MAP=(
    # Framework modules (android-urbi-framework/)
    ["utilitylib"]="utilitylib"
    ["urbimodel"]="urbimodel"
    ["urbicore"]="urbicore"
    ["designsystem"]="designsystem"
    ["urbiscan"]="urbiscan"
    ["urbisearch"]="urbisearch"
    ["urbipay"]="urbipay"
    ["ticketlib"]="ticketlib"
    ["urbitaxi"]="urbitaxi"
    ["evcharging"]="evcharging"
    ["transpo"]="transpo"
    ["tripo"]="tripo"
    ["mobilitylib"]="mobilitylib"
    ["composeds"]="composeds"
    ["composenavigation"]="composenavigation"
    ["common-state"]="common-state"
    ["login"]="login"
    ["commonview"]="commonview"
    # App-level feature modules (root level)
    ["history"]="history"
    ["profile"]="profile"
    ["map"]="map" 
    ["shop"]="shop"
)

# Function to check if changelog already has unreleased changes
has_unreleased_changes() {
    local changelog_file="$1"
    if [ -f "$changelog_file" ]; then
        # Check if there's an [Unreleased] section with actual changes (not just the header)
        awk '/## \[Unreleased\]/{unreleased=1; next} /^## \[/{unreleased=0} unreleased && /^- /{found=1; exit} END{exit !found}' "$changelog_file"
        return $?
    fi
    return 1
}

# Function to get changelog path for module
get_changelog_path() {
    local module="$1"
    # App-level modules are at root level, framework modules are under android-urbi-framework/
    case "$module" in
        "history"|"profile"|"map"|"shop")
            echo "$module/changelog.md"
            ;;
        *)
            echo "android-urbi-framework/$module/changelog.md"
            ;;
    esac
}

# Function to add unreleased entry to changelog
add_unreleased_entry() {
    local module="$1"
    local changelog_file=$(get_changelog_path "$module")
    
    # Check if changelog already has unreleased changes
    if has_unreleased_changes "$changelog_file"; then
        echo "  📝 $module already has unreleased changes, skipping"
        return 0
    fi
    
    echo "  📝 Adding unreleased entry to $module/changelog.md"
    
    # Create changelog if it doesn't exist
    if [ ! -f "$changelog_file" ]; then
        cat > "$changelog_file" << EOF
# Changelog

All notable changes to this project will be documented in this file.

## [Unreleased]
- Updated module implementation

EOF
        git add "$changelog_file"
        return 0
    fi
    
    # Check if [Unreleased] section exists
    if grep -q "## \[Unreleased\]" "$changelog_file"; then
        # Add entry under existing [Unreleased] section
        sed -i '' '/## \[Unreleased\]/a\
- Updated module implementation
' "$changelog_file"
    else
        # Add [Unreleased] section at the top after title
        sed -i '' '/^# /a\
\
## [Unreleased]\
- Updated module implementation
' "$changelog_file"
    fi
    
    git add "$changelog_file"
}

# Get list of changed files in this commit
CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR)

if [ -n "$CHANGED_FILES" ]; then
    echo "📁 Checking changed files for module updates..."
    
    # Track which modules have been processed to avoid duplicates
    declare -A PROCESSED_MODULES=()
    
    # Check each changed file
    for file in $CHANGED_FILES; do
        module=""
        
        # Detect module type and extract module name
        if [[ "$file" =~ ^android-urbi-framework/([^/]+)/ ]]; then
            # Framework module: android-urbi-framework/MODULE/...
            module="${BASH_REMATCH[1]}"
        elif [[ "$file" =~ ^(history|profile|map|shop)/ ]]; then
            # App-level module: MODULE/...
            module="${BASH_REMATCH[1]}"
        else
            # Skip files not in any module
            continue
        fi
        
        # Skip if not a known module or already processed
        if [ -z "$module" ] || [[ -n "${PROCESSED_MODULES[$module]}" ]]; then
            continue
        fi
        
        # Check if this module is in our mapping
        if [[ -n "${MODULE_MAP[$module]}" ]]; then
            echo "🔍 Detected changes in module: $module"
            add_unreleased_entry "$module"
            PROCESSED_MODULES[$module]=1
        fi
    done
    
    echo "✅ Changelog auto-update complete"
else
    echo "ℹ️  No changes detected"
fi
##### CHANGELOG AUTO-UPDATE END #####

##### KOTLINTER HOOK START #####
GRADLEW=$PWD/gradlew
$GRADLEW lintKotlin

status=$?
if [ "$status" != 0 ] ; then
    echo 1>&2 "\nlintKotlin found problems, running formatKotlin; commit the result and re-push"
    $GRADLEW testDebugUnitTest
    $GRADLEW formatKotlin
    exit 1
fi
##### KOTLINTER HOOK END #####
